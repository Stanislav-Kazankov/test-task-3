{"version":3,"file":"view-model.min.js","sources":["view-model.js"],"sourcesContent":["'use strict';\n\n(function () {\n  var DATA_ROW_COUNT = 7;\n  var DATA_COL_COUNT = 24;\n  var DEFAULT_TIME_STR = '00:00';\n  var DAY_IN_MS = 24 * 60 * 60 * 1000;\n  var MS_PER_PIXEL = (60 * 60 * 1000) / 34;\n  var HEAD_COL_WIDTH = document.querySelector('.chart__head-col').offsetWidth;\n  var MAX_TABLE_WIDTH = DAY_IN_MS / MS_PER_PIXEL;\n  var MAX_CHART_WIDTH = HEAD_COL_WIDTH + MAX_TABLE_WIDTH;\n  var CELL_WIDTH = MAX_TABLE_WIDTH / DATA_COL_COUNT;\n  var CELL_BORDER_WIDTH = 1;\n  var DATA_CELL_COUNT = DATA_ROW_COUNT * DATA_COL_COUNT;\n  var MIN_PER_HOUR = 60;\n\n\n\n  function ScheduleHoursViewModel() {\n    var me = this;\n\n    function ScheduleHour(initWorking) {\n      var me = this;\n      me.working = ko.observable(initWorking);\n    }\n\n    me.startTimeStr = ko.observable(DEFAULT_TIME_STR);\n    me.endTimeStr = ko.observable(DEFAULT_TIME_STR);\n\n    me.timeDiffInPixels = ko.computed(function () {\n      var diff = strToTime(me.endTimeStr()) - strToTime(me.startTimeStr());\n\n      return (diff !== 0) ? diff / MS_PER_PIXEL : DAY_IN_MS / MS_PER_PIXEL;\n    }, me);\n\n    function strToTime(str) {\n      return Date.parse('2000-01-01T' + str + ':00.000Z');\n    }\n\n    me.chartWidth = ko.computed(function () {\n      var diff = me.timeDiffInPixels();\n      var diffMinusBorder = diff - CELL_BORDER_WIDTH;\n\n      return (diff >= 0) ? HEAD_COL_WIDTH + diffMinusBorder: MAX_CHART_WIDTH + diffMinusBorder;\n    }, me);\n\n    me.tableOffset = ko.computed(function () {\n      var offset = -(strToTime(me.startTimeStr()) - strToTime(DEFAULT_TIME_STR)) / MS_PER_PIXEL;\n\n      return offset;\n    }, me);\n\n    var headCells = table.querySelectorAll('.table__cell--head');\n    var prevLeftShowCell = headCells[0];\n\n    function getHoursStr(timeStr) {\n      return timeStr.slice(0, 2);\n    }\n\n    function getMinutesStr(timeStr) {\n      return timeStr.slice(3, 5);\n    }\n\n    function getMinutes(timeStr) {\n      return Number.parseInt(getMinutesStr(timeStr), 10);\n    }\n\n    function writeTimeToCell(cell, timeStr) {\n      cell.childNodes[0].textContent = getHoursStr(timeStr);\n      cell.querySelector('sup').textContent = getMinutesStr(timeStr);\n    }\n\n    function getElemIndex(items, item) {\n      return Array.from(items).indexOf(item);\n    }\n\n    function getCellIndexByTime(timeStr) {\n      return Number.parseInt(getHoursStr(timeStr), 10);\n    }\n\n    me.startTimeStr.subscribe(function (newValue) {\n      var prevLeftShowCellIndex = getElemIndex(headCells, prevLeftShowCell);\n      if (prevLeftShowCellIndex % 2) {\n        prevLeftShowCell.style.paddingRight = prevLeftShowCell.style.paddingLeft = '3px';\n        writeTimeToCell(prevLeftShowCell, formatTime(prevLeftShowCellIndex.toString()) + ':00');\n      }\n\n      var leftShowCellIndex = getCellIndexByTime(newValue);\n      var leftShowCell = headCells[leftShowCellIndex];\n\n      if (leftShowCellIndex % 2) {\n        var minutes = getMinutes(newValue);\n        if (minutes > 0) {\n          writeTimeToCell(leftShowCell, newValue);\n        } else {\n          writeTimeToCell(leftShowCell, '');\n        }\n        leftShowCell.style.paddingLeft = (minutes * CELL_WIDTH / MIN_PER_HOUR).toString() + 'px';\n        leftShowCell.style.paddingRight = '0';\n      } else {\n        if (leftShowCellIndex) {\n          headCells[leftShowCellIndex - 1].style.paddingLeft = '0';\n        }\n      }\n      prevLeftShowCell = leftShowCell;\n    });\n\n    var headCellsCopy = tableCopy.querySelectorAll('.table__cell--head');\n    var prevHCells = headCells;\n    var prevRightShowCell = headCells[22];\n\n    function replaceInnerHTML(fromElem, toElem) {\n      toElem.innerHTML = fromElem.innerHTML;\n      fromElem.innerHTML = '';\n    }\n\n    me.endTimeStr.subscribe(function (newValue) {\n      var prevRightShowCellIndex = getElemIndex(prevHCells, prevRightShowCell);\n      if (prevRightShowCellIndex % 2) {\n        if (prevHCells[prevRightShowCellIndex - 1].innerHTML !== '') {\n          replaceInnerHTML(prevHCells[prevRightShowCellIndex - 1], prevHCells[prevRightShowCellIndex]);\n          prevHCells[prevRightShowCellIndex - 1].style.textAlign = 'left';\n        }\n      }\n\n      var hCells = (getCellIndexByTime(me.startTimeStr()) <= getCellIndexByTime(newValue)) ? headCells : headCellsCopy;\n      var rightShowCellIndex = getCellIndexByTime(newValue);\n      var rightShowCell = hCells[rightShowCellIndex];\n      var minutes = getMinutes(newValue);\n      if (rightShowCellIndex % 2 && minutes > 0) {\n        if (minutes < 49) {\n          replaceInnerHTML(hCells[rightShowCellIndex], hCells[rightShowCellIndex - 1]);\n          hCells[rightShowCellIndex - 1].style.textAlign = 'right';\n        }\n      }\n      prevHCells = hCells;\n      prevRightShowCell = rightShowCell;\n    });\n\n    me.scheduleHours = ko.observableArray(new Array());\n\n    for (var i = 0; i < DATA_CELL_COUNT; i++) {\n      me.scheduleHours().push(new ScheduleHour(true));\n    }\n\n    me.invertHour = function (item) {\n      item.working(!item.working());\n    }\n\n    function fillHours (working) {\n      for (var i = 0; i < DATA_CELL_COUNT; i++) {\n        me.scheduleHours()[i].working(working);\n      }\n    }\n\n    me.fillHoursAuto = function () {\n      fillHours(true);\n    }\n\n    me.clearHours = function () {\n      fillHours(false);\n    }\n  }\n\n  ko.applyBindings(new ScheduleHoursViewModel());\n})();\n"],"names":["DEFAULT_TIME_STR","MS_PER_PIXEL","HEAD_COL_WIDTH","document","querySelector","offsetWidth","MAX_CHART_WIDTH","DAY_IN_MS","ko","applyBindings","me","this","ScheduleHour","initWorking","working","observable","strToTime","str","Date","parse","startTimeStr","endTimeStr","timeDiffInPixels","computed","diff","chartWidth","diffMinusBorder","tableOffset","headCells","table","querySelectorAll","prevLeftShowCell","getHoursStr","timeStr","slice","getMinutesStr","getMinutes","Number","parseInt","writeTimeToCell","cell","childNodes","textContent","getElemIndex","items","item","Array","from","indexOf","getCellIndexByTime","subscribe","newValue","prevLeftShowCellIndex","style","paddingRight","paddingLeft","formatTime","toString","minutes","leftShowCellIndex","leftShowCell","MAX_TABLE_WIDTH","headCellsCopy","tableCopy","prevHCells","prevRightShowCell","replaceInnerHTML","fromElem","toElem","innerHTML","prevRightShowCellIndex","textAlign","hCells","rightShowCellIndex","rightShowCell","scheduleHours","observableArray","i","DATA_ROW_COUNT","push","fillHours","invertHour","fillHoursAuto","clearHours"],"mappings":"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"}