{"version":3,"file":"view-model.min.js","sources":["view-model.js"],"sourcesContent":["'use strict';\n\n(function () {\n  var DATA_ROW_COUNT = 7;\n  var DATA_COL_COUNT = 24;\n  var DEFAULT_TIME_STR = '00:00';\n  var DAY_IN_MS = 24 * 60 * 60 * 1000;\n  var MS_PER_PIXEL = (60 * 60 * 1000) / 34;\n  var HEAD_COL_WIDTH = document.querySelector('.chart__head-col').offsetWidth;\n  var MAX_TABLE_WIDTH = DAY_IN_MS / MS_PER_PIXEL;\n  var MAX_CHART_WIDTH = HEAD_COL_WIDTH + MAX_TABLE_WIDTH;\n  var CELL_WIDTH = MAX_TABLE_WIDTH / DATA_COL_COUNT;\n  var CELL_BORDER_WIDTH = 1;\n  var DATA_CELL_COUNT = DATA_ROW_COUNT * DATA_COL_COUNT;\n  var MIN_PER_HOUR = 60;\n\n  var getCellOpenTag = function (cellKind) {\n    var classes = 'table__cell table__cell--' + cellKind;\n    var dataBindAttribute = (cellKind === 'data') ? 'data-bind=click:$parent.invertHour,style:{backgroundColor:working()?&quot#0066ff&quot:&quot#dfe4ef&quot}' : '';\n    return '<li class=\"' + classes + '\"' + dataBindAttribute + '>';\n  }\n\n  var getCellMarkup = function (cellKind, cellContent) {\n    return getCellOpenTag(cellKind) + cellContent + '</li>';\n  }\n\n  var chart = document.querySelector('.schedule__chart');\n  var headCellsMarkup = '';\n  var cellContent;\n\n  var table = chart.querySelector('.chart__table');\n\n  var tableCopy = table.cloneNode(true);\n\n  var formatTime = function (timeStr) {\n    var result = timeStr;\n    if (Number.parseInt(timeStr, 10) <= 9) {\n      result = '0' + timeStr;\n    }\n    return result;\n  }\n\n  for (var j = 0; j < 24; j++) {\n    cellContent = (j % 2) ? formatTime(j.toString()) + '<sup style=\"font-size: 9px;\">00</sup>' : '';\n    headCellsMarkup += getCellMarkup('head', cellContent);\n  }\n\n  var chartHead = chart.querySelector('.table__head');\n\n  chartHead.insertAdjacentHTML('beforeend', headCellsMarkup);\n\n  var chartBody = chart.querySelector('.table__body');\n\n  chartBody.insertAdjacentHTML('beforeend', getCellMarkup('data', ''));\n\n  var chartHead = tableCopy.querySelector('.table__head');\n\n  chartHead.insertAdjacentHTML('beforeend', headCellsMarkup);\n\n  chart.appendChild(tableCopy);\n\n  table.setAttribute('data-bind', 'style: {marginLeft: tableOffset()}');\n\n  chartBody = tableCopy.querySelector('.table__body');\n\n  chartBody.insertAdjacentHTML('beforeend', getCellMarkup('data', ''));\n\n  function ScheduleHoursViewModel() {\n    var me = this;\n\n    function ScheduleHour(initWorking) {\n      var me = this;\n      me.working = ko.observable(initWorking);\n    }\n\n    me.startTimeStr = ko.observable(DEFAULT_TIME_STR);\n    me.endTimeStr = ko.observable(DEFAULT_TIME_STR);\n\n    me.timeDiffInPixels = ko.computed(function () {\n      var diff = strToTime(me.endTimeStr()) - strToTime(me.startTimeStr());\n\n      return (diff !== 0) ? diff / MS_PER_PIXEL : DAY_IN_MS / MS_PER_PIXEL;\n    }, me);\n\n    function strToTime(str) {\n      return Date.parse('2000-01-01T' + str + ':00.000Z');\n    }\n\n    me.chartWidth = ko.computed(function () {\n      var diff = me.timeDiffInPixels();\n      var diffMinusBorder = diff - CELL_BORDER_WIDTH;\n\n      return (diff >= 0) ? HEAD_COL_WIDTH + diffMinusBorder: MAX_CHART_WIDTH + diffMinusBorder;\n    }, me);\n\n    me.tableOffset = ko.computed(function () {\n      var offset = -(strToTime(me.startTimeStr()) - strToTime(DEFAULT_TIME_STR)) / MS_PER_PIXEL;\n\n      return offset;\n    }, me);\n\n    var headCells = table.querySelectorAll('.table__cell--head');\n    var prevLeftShowCell = headCells[0];\n\n    function getHoursStr(timeStr) {\n      return timeStr.slice(0, 2);\n    }\n\n    function getMinutesStr(timeStr) {\n      return timeStr.slice(3, 5);\n    }\n\n    function getMinutes(timeStr) {\n      return Number.parseInt(getMinutesStr(timeStr), 10);\n    }\n\n    function writeTimeToCell(cell, timeStr) {\n      cell.childNodes[0].textContent = getHoursStr(timeStr);\n      cell.querySelector('sup').textContent = getMinutesStr(timeStr);\n    }\n\n    function getElemIndex(items, item) {\n      return Array.from(items).indexOf(item);\n    }\n\n    function getCellIndexByTime(timeStr) {\n      return Number.parseInt(getHoursStr(timeStr), 10);\n    }\n\n    me.startTimeStr.subscribe(function (newValue) {\n      var prevLeftShowCellIndex = getElemIndex(headCells, prevLeftShowCell);\n      if (prevLeftShowCellIndex % 2) {\n        prevLeftShowCell.style.paddingRight = prevLeftShowCell.style.paddingLeft = '3px';\n        writeTimeToCell(prevLeftShowCell, formatTime(prevLeftShowCellIndex.toString()) + ':00');\n      }\n\n      var leftShowCellIndex = getCellIndexByTime(newValue);\n      var leftShowCell = headCells[leftShowCellIndex];\n\n      if (leftShowCellIndex % 2) {\n        var minutes = getMinutes(newValue);\n        if (minutes > 0) {\n          writeTimeToCell(leftShowCell, newValue);\n        } else {\n          writeTimeToCell(leftShowCell, '');\n        }\n        leftShowCell.style.paddingLeft = (minutes * CELL_WIDTH / MIN_PER_HOUR).toString() + 'px';\n        leftShowCell.style.paddingRight = '0';\n      } else {\n        if (leftShowCellIndex) {\n          headCells[leftShowCellIndex - 1].style.paddingLeft = '0';\n        }\n      }\n      prevLeftShowCell = leftShowCell;\n    });\n\n    var headCellsCopy = tableCopy.querySelectorAll('.table__cell--head');\n    var prevHCells = headCells;\n    var prevRightShowCell = headCells[22];\n\n    function replaceInnerHTML(fromElem, toElem) {\n      toElem.innerHTML = fromElem.innerHTML;\n      fromElem.innerHTML = '';\n    }\n\n    me.endTimeStr.subscribe(function (newValue) {\n      var prevRightShowCellIndex = getElemIndex(prevHCells, prevRightShowCell);\n      if (prevRightShowCellIndex % 2) {\n        if (prevHCells[prevRightShowCellIndex - 1].innerHTML !== '') {\n          replaceInnerHTML(prevHCells[prevRightShowCellIndex - 1], prevHCells[prevRightShowCellIndex]);\n          prevHCells[prevRightShowCellIndex - 1].style.textAlign = 'left';\n        }\n      }\n\n      var hCells = (getCellIndexByTime(me.startTimeStr()) <= getCellIndexByTime(newValue)) ? headCells : headCellsCopy;\n      var rightShowCellIndex = getCellIndexByTime(newValue);\n      var rightShowCell = hCells[rightShowCellIndex];\n      var minutes = getMinutes(newValue);\n      if (rightShowCellIndex % 2 && minutes > 0) {\n        if (minutes < 49) {\n          replaceInnerHTML(hCells[rightShowCellIndex], hCells[rightShowCellIndex - 1]);\n          hCells[rightShowCellIndex - 1].style.textAlign = 'right';\n        }\n      }\n      prevHCells = hCells;\n      prevRightShowCell = rightShowCell;\n    });\n\n    me.scheduleHours = ko.observableArray(new Array());\n\n    for (var i = 0; i < DATA_CELL_COUNT; i++) {\n      me.scheduleHours().push(new ScheduleHour(true));\n    }\n\n    me.invertHour = function (item) {\n      item.working(!item.working());\n    }\n\n    function fillHours (working) {\n      for (var i = 0; i < DATA_CELL_COUNT; i++) {\n        me.scheduleHours()[i].working(working);\n      }\n    }\n\n    me.fillHoursAuto = function () {\n      fillHours(true);\n    }\n\n    me.clearHours = function () {\n      fillHours(false);\n    }\n  }\n\n  ko.applyBindings(new ScheduleHoursViewModel());\n})();\n"],"names":["DEFAULT_TIME_STR","MS_PER_PIXEL","HEAD_COL_WIDTH","document","querySelector","offsetWidth","MAX_CHART_WIDTH","DAY_IN_MS","getCellMarkup","cellKind","cellContent","chart","headCellsMarkup","table","tableCopy","cloneNode","formatTime","timeStr","result","Number","parseInt","j","toString","insertAdjacentHTML","chartBody","appendChild","setAttribute","ko","applyBindings","me","this","ScheduleHour","initWorking","working","observable","strToTime","str","Date","parse","startTimeStr","endTimeStr","timeDiffInPixels","computed","diff","chartWidth","diffMinusBorder","tableOffset","headCells","querySelectorAll","prevLeftShowCell","getHoursStr","slice","getMinutesStr","getMinutes","writeTimeToCell","cell","childNodes","textContent","getElemIndex","items","item","Array","from","indexOf","getCellIndexByTime","subscribe","newValue","prevLeftShowCellIndex","style","paddingRight","paddingLeft","minutes","leftShowCellIndex","leftShowCell","MAX_TABLE_WIDTH","headCellsCopy","prevHCells","prevRightShowCell","replaceInnerHTML","fromElem","toElem","innerHTML","prevRightShowCellIndex","textAlign","hCells","rightShowCellIndex","rightShowCell","scheduleHours","observableArray","i","DATA_ROW_COUNT","push","fillHours","invertHour","fillHoursAuto","clearHours"],"mappings":"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"}